Project : Heaps 


Assignment Overview

You will be building a fixed size min heap. Meaning, in the constructor for the Heap class there 
will be a capacity value entered and you cannot ever exceed the number of elements at that capacity level. 

 

Assignment Deliverables
Be sure to submit your project as a folder named "Project6" and include in the folder:

Heap.py, a Python3 file


Heap Class is partially completed in the skeleton file. Function signatures or provided funtons may not be edited in anyway.
* __init(self, capacity)
    self._size - number of nodes in tree
    self._data - built in list meant to contingiously store the nodes 
    self._capacity - enforced number of elements that can exist in the heap at any given time 

Complete and implement the following functions. Do not modify the function signatures 
* _percUp(self)
    - when an element exists in the last spot of the underlying data, perculate it up to it's 
    valid spot in the heap representation 
    - return None 
    - Time Complexity O(log(N))     
    - Space Compleity O(1) 

* _percDown(self)
    - when an element exists in the first spot of the underlying data, perculate it down to it's 
    valid spot in the heap representation 
    - return None 
    - Time Complexity O(log(N))     
    - Space Compleity O(1) 

* push( self, el):
    - adds new element into heap  
    - el will always be of type Node 
    - return None 
    - in the event that pushing will excede the limit, you must pop an element out. 
    - Time Complexity O(log(N))
    - Space Complexity O(1) 

* pop(self) 
    - removes the root element from the heap 
    - return: type Node, the root element 
    - if no elements exist return None 
    - Time Complexity O(log(N))
    - Space Complexity O(1) 

* is_empty(self)
    - return : type Bool 


    


Application Problem 

* most_x_commons(vals, x):

- returns a set of integers
- Space Complexity O(N)
- Time Complexity O(Nlog(x)) 
- N == len(vals)



readme.txt, a text file that includes:
Your name and feedback on the project
How long it took to complete
A list of any external resources that you used, especially websites (make sure to include the URLs) and which function(s) you used this information for.
 
Assignment Specifications
- No use of heapq module is permitted
- in the case  of ties pick the lesser than value
- Only allowed container classes (or class methods) allowed are built in lists (specifically to store underlying heap class data) and the built in dictionary.
- most_x_common MUST run faster then nlogn time, and use your heap class.
- you are guaranteed that x is always <= N (Where N is the number of elements)
- in the event of a tie on count within deciding which element to remove because the count is the same, pop the lower value.
- as always methods and attributes with a leading underscore should not be called outside of the class definition
- guarenteed that no duplicate nodes (meaning same key and value) will be called to be pushed into heap
